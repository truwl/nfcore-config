profiles {
  truwl {
    process.executor = 'google-lifesciences'
    workDir = 'gs://truwl-internal-inputs/nf-scratch'
    google.location = 'us-central1'
    google.zone = 'us-central1-c'
    google.project = 'xdbio-encode-space1'
    process.memory = '50GB'
    process.cpus = '8'
    process.echo = true
    google.lifeSciences.debug = true
    google.lifeSciences.preemptible = true
    google.lifeSciences.bootDiskSize = '50 GB'
  }
  nfcore_airrflow {
    process.container = 'nfcore/airrflow'
  }
  nfcore_chipseq {
    process.container = 'nfcore/chipseq'
  }
  nfcore_epitopeprediction {
    process.container = 'nfcore/epitopeprediction'
  }
  nfcore_methylseq {
    process.container = 'nfcore/methylseq'
  }
  nfcore_sarek {
    process.container = 'nfcore/sarek'
  }
  nfcore_ampliseq {
    process.container = 'nfcore/ampliseq'
  }
  nfcore_clipseq {
    process.container = 'nfcore/clipseq'
  }
  nfcore_fetchngs {
    process.container = 'nfcore/fetchngs'
  }
  nfcore_mhcquant {
    process.container = 'nfcore/mhcquant'
  }
  nfcore_scrnaseq {
    process.container = 'nfcore/scrnaseq'
  }
  nfcore_atacseq {
    process.container = 'nfcore/atacseq'
  }
  nfcore_cutandrun {
    process.container = 'nfcore/cutandrun'
  }
  nfcore_hic {
    process.container = 'nfcore/hic'
  }
  nfcore_nanoseq {
    process.container = 'nfcore/nanoseq'
  }
  nfcore_smrnaseq {
    process.container = 'nfcore/smrnaseq'
  }
  nfcore_bacass {
    process.container = 'nfcore/bacass'
  }
  nfcore_diaproteomics {
    process.container = 'nfcore/diaproteomics'
  }
  nfcore_hlatyping {
    process.container = 'nfcore/hlatyping'
  }
  nfcore_pgdb {
    process.container = 'nfcore/pgdb'
  }
  nfcore_viralrecon {
    process.container = 'nfcore/viralrecon'
  }
  nfcore_bactmap {
    process.container = 'nfcore/bactmap'
  }
  nfcore_dualrnaseq {
    process.container = 'nfcore/dualrnaseq'
  }
  nfcore_mag {
    process.container = 'nfcore/mag'
  }
  nfcore_proteomicslfq {
    process.container = 'nfcore/proteomicslfq'
  }
  nfcore_cageseq {
    process.container = 'nfcore/cageseq'
  }
  nfcore_eager {
    process.container = 'nfcore/eager'
  }
  nfcore_metaboigniter {
    process.container = 'nfcore/metaboigniter'
  }
  nfcore_rnaseq {
    process.container = 'nfcore/rnaseq'
  }
}

trace {
  enabled = true
  file = "pipeline_execution_trace.txt"
  fields = 'task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,syscr,syscw,read_bytes,write_bytes'
}

params {
  max_memory = 300.GB
  max_time = 240.h
  singleCPUMem = 6.5.GB
}


//https://github.com/lescai/nf-gscloud/blob/main/sarek_gcp_example.config
process {

  // default machine type
  machineType = 'n1-standard-4'

  withLabel:cpus_1 {
    machineType = 'n1-standard-1'
    cpus = {check_resource(1)}
  }
  withLabel:cpus_2 {
    machineType = 'n1-standard-2'
    cpus = {check_resource(2)}
  }
  withLabel:cpus_4 {
    machineType = 'n1-standard-4'
    cpus = {check_resource(4)}
  }
  withLabel:cpus_8 {
    machineType = 'n1-standard-8'
    cpus = {check_resource(8)}
  }
  withLabel:cpus_16 {
    machineType = 'n1-standard-16'
    cpus = {check_resource(16)}
  }
  withLabel:cpus_max {
    machineType = 'n1-standard-16'
    cpus = {params.max_cpus}
  }

  withLabel:memory_singleCPU_2_task {
    machineType = 'n1-highmem-4'
    memory = {check_resource(16.GB * task.attempt)}
  }
  withLabel:memory_singleCPU_task_sq {
    machineType = 'n1-highmem-4'
    memory = {check_resource(8.GB * task.attempt * task.attempt)}
  }
  withLabel:memory_max {
    machineType = 'n1-highmem-16'
    memory = {params.max_memory}
  }

  withName:PICARD_MARKDUPLICATES {
    disk = '100 GB'
  }
  withName:GUNZIP {
    disk = '100 GB'
  }
  withName:UNTAR {
    disk = '100 GB'
  }
  withName:CAT_FASTQ {
    disk = '100 GB'
  }
}

// THIS SHOULD BE DEFINED IN BASIC CONFIG BUT IT NEEDS IT HERE ANYWAY
// Return the minimum between requirements and a maximum limit to ensure that resource requirements don't go over
def check_resource(obj) {
    try {
      if (obj.getClass() == nextflow.util.MemoryUnit && obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else if (obj.getClass() == nextflow.util.Duration && obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else if (obj.getClass() == java.lang.Integer)
        return Math.min(obj, params.max_cpus as int)
      else
        return obj
    } catch (all) {
        println "   ### ERROR ###   Max params max_memory:'${params.max_memory}', max_time:'${params.max_time}' or max_cpus:'${params.max_cpus}'  is not valid! Using default value: $obj"
    }
}
